@startuml notify_system_shema
title Notification service

skinparam componentStyle uml2
actor Users
actor Admin
node "nginx" as nginx
node "fastapi" as fastapi
node "auth" as auth
node "ugc" as ugc
package "Notification" {
    node "Admin-notify Django" as django{
        component "django-celery-beat" as django_celery
        component "Admin views" as admin_views        
        component "Django ORM" as admin_orm            
    }
    database "notify Postgresql" as postgre {    
        component "Tabels: \n user\n group\n group_user\n template\n group_periodic_task" as admin_tables
    }
    node "notify-api" as notify_api{
        component "API" as api
        component "CRUD user notify" as crud_admin 
        component "Filling messege" as fill_messege
        component "Celery tasks" as celery_tasks                  
    }
    node "scheduler-beat Celery" as admin_celery
    node "scheduler-worker Celery" as admin_worker
    node "redis-scheduler Redis" as redis
    node "notify-rabbitmq RabbitMQ" as rabbit
    node "notify-workers Celery" as workers    
    node "notify-flower Flower" as flower
}
cloud "Email SendGrid"  as sendgrid
cloud "Other messaging services"  as other_services
     
Users -left- nginx
Admin -right- nginx
nginx <-down--> admin_views : admin scheduler
nginx <-down--> flower : task execution\n monitoring
nginx <-down--> notify_api : add/modify user setting

admin_orm <-right-> admin_tables 
django_celery -> redis  : scheduler tasks
redis -down-> admin_celery
redis -down-> admin_worker
admin_celery -down-> admin_worker
admin_worker -down-> api : send messages to a group of users

crud_admin <-up-> admin_tables
fill_messege <-down- fastapi
fill_messege <-down-auth
fill_messege <-down- ugc
celery_tasks --> rabbit : sending messages tasks
rabbit --> workers
flower <-- rabbit
workers --> sendgrid
workers ..> other_services
 
@enduml 